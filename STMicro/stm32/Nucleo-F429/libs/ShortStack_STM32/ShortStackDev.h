/*  
 *   File: ShortStackDev.h
 *   Generated by LonTalk Interface Developer 4.00.11
 *
 *   Created on Thu Oct 22 11:50:57 2009
 *   This file applies to the device with program ID 9F:FF:FF:06:00:0A:04:01
 *
 *   Copyright (c) Echelon Corporation 2002-2009
 *   All rights reserved.
 *
 *   This file is Example Software as defined in the Software
 *   License Agreement that governs its use.
 *
 *   ECHELON MAKES NO REPRESENTATION, WARRANTY, OR CONDITION OF
 *   ANY KIND, EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE OR IN
 *   ANY COMMUNICATION WITH YOU, INCLUDING, BUT NOT LIMITED TO,
 *   ANY IMPLIED WARRANTIES OF MERCHANTABILITY, SATISFACTORY
 *   QUALITY, FITNESS FOR ANY PARTICULAR PURPOSE, 
 *   NONINFRINGEMENT, AND THEIR EQUIVALENTS.
 */
#if !defined(DEFINED_SHORTSTACKDEV_H)
#define DEFINED_SHORTSTACKDEV_H

#include <stddef.h>
#include "LonPlatform.h"
#include "LonNvTypes.h"
#include "LonCpTypes.h"

/*
 *  Enumeration: LonNvIndex
 *  Network variable indices and count
 *  
 *  The NV index enumeration provides the index of a network
 *  variable within the entire device. This index will most likely
 *  (but not necessarily) reflect the order of the NV declarations
 *  in this application. It will, however, always reflect the order
 *  in which the NV items were compiled by the NEURON C compiler.
 */
typedef LON_ENUM_BEGIN(LonNvIndex)
{
    LonNvIndexNviVolt = 0,
    LonNvIndexNvoVoltFb = 1,
    LonNvCount = 2
} LON_ENUM_END(LonNvIndex);

#define LON_PERSISTENT_NVS  0

/*
 *  Enumeration: LonMtIndex
 *  Message tag indices and count
 *
 *  The MT index enumeration provides the index of a message
 *  tag within the device. A message tag is a virtual concept
 *  and has no variable declaration on the ShortStack host therefore.
 */
typedef LON_ENUM_BEGIN(LonMtIndex)
{
    LonMtCount = 7		// todo ekh 0 - why did I have to change this from 0 to 7 ? (the code does not work with this set to 0)
} LON_ENUM_END(LonMtIndex);


/*
 *  Application Buffer Sizes
 *  DO NOT EDIT - the buffer sizes are used to control
 *  the buffer allocation inside the API functions. The
 *  actual buffer size is fixed with each ShortStack 
 *  Micro Server firmware; changes to the buffer sizes
 *  require a custom Micro Server.
 */

#define LON_APP_OUTPUT_BUFSIZE 66u
#define LON_APP_INPUT_BUFSIZE  66u
/*
 * LON_ISI_ENABLED controls whether the API for interoperable self-installation (ISI)
 * will be included with your application. This requires that you use a Micro Server
 * which includes support for ISI.
 * Also note that enabling ISI automatically enables support for explicit addressing,
 * overruling your preference in that matter. ISI requires support for explicit addressing.
 */
#define LON_ISI_ENABLED   0x00   /* 0x20: ISI API supported, 0x00 otherwise. Also enabled expl. addressing! */
#define LON_APP_SIGNATURE 18750u
#define LON_SERVICE_PIN_TIMER 0u
/*
 * LON_EXPLICIT_ADDRESSING controls whether the API and Micro Server support
 * explicit addressing information. This must be enabled for use with ISI.
 */
#define LON_EXPLICIT_ADDRESSING (0x20|LON_ISI_ENABLED)    /* 0x20: enable expl. addressing (zero to disable) */

/*  The program ID for this device. Do not edit */
#define STD_PROGRAM_ID "9F:FF:FF:06:00:0A:04:01"

/*  Include support for Query* functions: */
#define LON_NM_QUERY_FUNCTIONS 1      /* exclude Query... functions */

/*  Include support for Update* functions: */
#define LON_NM_UPDATE_FUNCTIONS 1     /* exclude Update... functions */

/*   Include support for application messaging: */
// ed2dani, I am sure we are going to need this. Enabling.
#define LON_APPLICATION_MESSAGES  1    /* application messages are disabled */
#define LON_UTILITY_FUNCTIONS  0   /* control inclusion of utility functions (0,1) */
#define LON_FB_COUNT  1


/*  Size of the file access window in bytes (big-endian): */
#define LON_DMF_WINDOW_SIZE  0
#define LON_DMF_ENABLED  0

/*
 *   Some utilities used by the API:
 */

#define LON_APP_INIT_MSG_SIZE     28   /* size of the app init message */
#define LON_MAX_NVS_IN_NV_INIT    61   /* maximum number of nvs in one nv init message */
#define LON_NV_ESCAPE_SEQUENCE    63   /* escape code to denote a nv index >  62 */

/*
 *  Type: LonNvDescription
 *  Defines the structure of the nvTable variable.
 *
 *  The LonNvDescription defines the structure of the nvTable, which is
 *  implemented in ShortStackDev.c. 
 *  The nvTable is used by various API functions to obtain details
 *  for each individual network variable (configuration network 
 *  variables included). Each element of a network variable array
 *  has a separate record in this table.
 */
#define LON_NVDESC_OUTPUT_MASK        0x80u
#define LON_NVDESC_OUTPUT_SHIFT       7
#define LON_NVDESC_OUTPUT_FIELD       Attributes

#define LON_NVDESC_PERSISTENT_MASK    0x40u
#define LON_NVDESC_PERSISTENT_SHIFT   6
#define LON_NVDESC_PERSISTENT_FIELD   Attributes

#define LON_NVDESC_POLLED_MASK        0x20u
#define LON_NVDESC_POLLED_SHIFT       5
#define LON_NVDESC_POLLED_FIELD       Attributes

#define LON_NVDESC_SYNC_MASK          0x10u
#define LON_NVDESC_SYNC_SHIFT         4
#define LON_NVDESC_SYNC_FIELD         Attributes

#define LON_NVDESC_CHANGEABLE_MASK    0x08u
#define LON_NVDESC_CHANGEABLE_SHIFT   3
#define LON_NVDESC_CHANGEABLE_FIELD   Attributes

typedef struct 
{
    volatile void* const pData;  /* pointer to network variable data   */
    LonByte DeclaredSize;        /* declared, initial and maximum size */
    LonByte Attributes;          /* See macro definitions above        */
} LonNvDescription;

/*
 *  Message Tag Table Type Definition
 *  See the declaration of the MT table for more details (if any)
 */
typedef LonBool LonMtDescription;

/*
 *  Prototypes for access functions:
 *  The functions are defined in ShortStackDev.c and used by the
 *  ShortStack API to access data provided within ShortStackDev.c.
 */
extern const LonByte* LonGetSiData(unsigned* pLength);
extern const LonByte* LonGetAppInitData(void);
extern const LonNvDescription* const LonGetNvTable(void);
extern const LonMtDescription* const LonGetMtTable(void);


/*
 *  Network Variables
 *  The device's network variables are being specified here.
 *  Note that the actual network variables are being implemented
 *  in ShortStackDev.c. The following list of "extern"
 *  specifications is provided to allow other C language modules
 *  access to these network variables.
 */
extern volatile SNVT_volt nviVolt;
extern SNVT_volt nvoVoltFb;
#endif  /* defined(DEFINED_SHORTSTACKDEV_H) */
/* end of file. */
